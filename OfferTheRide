<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Offer a Ride - RideFusion</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    body {
      font-family: 'Poppins', sans-serif;
    }
    .particle {
      position: absolute;
      width: 6px;
      height: 6px;
      background: linear-gradient(45deg, #fbbf24, #f59e0b);
      border-radius: 50%;
      animation: float 15s infinite linear;
      opacity: 1;
      box-shadow: 0 0 12px #fbbf24;
    }
    @keyframes float {
      0% { transform: translateY(100vh) rotate(0deg); opacity: 0; }
      10% { opacity: 1; }
      90% { opacity: 1; }
      100% { transform: translateY(-100vh) rotate(360deg); opacity: 0; }
    }
    .error-message {
      display: none;
      color: #ff4444;
      font-size: 0.875rem;
      margin-top: 0.5rem;
    }
  </style>
</head>
<body class="bg-black text-white min-h-screen relative">

  <!-- Floating Particles -->
  <div class="fixed inset-0 pointer-events-none z-0">
    <div class="particle" style="left:10%;animation-delay:0s;"></div>
    <div class="particle" style="left:30%;animation-delay:2s;"></div>
    <div class="particle" style="left:50%;animation-delay:4s;"></div>
    <div class="particle" style="left:70%;animation-delay:6s;"></div>
    <div class="particle" style="left:90%;animation-delay:8s;"></div>
  </div>

  <!-- Background -->
  <div class="fixed inset-0 z-0">
    <img src="https://images.unsplash.com/photo-1449824913935-59a10b8d2000?ixlib=rb-4.0.3&auto=format&fit=crop&w=2070&q=80" class="w-full h-full object-cover opacity-40">
    <div class="absolute inset-0 bg-gradient-to-br from-black/80 via-black/70 to-black/80"></div>
  </div>

  <!-- Navigation Bar -->
  <nav class="bg-black/80 backdrop-blur-sm border-b border-yellow-600/30 sticky top-0 z-50 relative">
    <div class="max-w-7xl mx-auto px-6 py-4">
      <div class="flex items-center justify-between">
        <div class="flex items-center space-x-3">
          <div class="w-12 h-12 bg-gradient-to-r from-yellow-400 to-yellow-600 rounded-lg flex items-center justify-center shadow-lg">
            <span class="text-black font-bold text-xl">R</span>
          </div>
          <div>
            <span class="text-2xl font-bold bg-gradient-to-r from-yellow-400 to-yellow-600 bg-clip-text text-transparent">RideFusion</span>
            <div class="text-xs text-yellow-400">Rajpura Local Transport</div>
          </div>
        </div>
        <div class="hidden md:flex items-center space-x-6">
          <a href="finalhomepage.html" class="text-gray-300 hover:text-yellow-400 transition">Home</a>
          <a href="finalbookride.html" class="text-gray-300 hover:text-yellow-400 transition">Find Rides</a>
          <a href="finalofferaride.html" class="text-yellow-400 font-semibold">Offer Rides</a>
          <span id="userInfo" class="text-gray-300"></span>
          <button id="logoutBtn" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition text-sm">
            Logout
          </button>
        </div>
      </div>
    </div>
  </nav>

  <!-- Main Content -->
  <div class="relative z-10 max-w-6xl mx-auto px-6 py-8">
    
    <!-- Connection Status -->
    <div id="connectionStatus" class="mb-4 p-4 rounded-xl text-center hidden">
      <p class="font-semibold"></p>
    </div>

    <!-- Offer Ride Form -->
    <div class="bg-black/60 backdrop-blur-xl rounded-2xl p-8 mb-8 border border-yellow-600/30">
      <h1 class="text-3xl font-bold text-yellow-400 mb-2">Offer a Ride</h1>
      <p class="text-gray-400 mb-6">Share your journey and earn money!</p>

      <form id="offerRideForm" class="space-y-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          
          <!-- Vehicle Type -->
          <div>
            <label class="block text-yellow-400 mb-2 font-semibold">Vehicle Type *</label>
            <select id="vehicleType" required class="w-full bg-gray-900 border border-yellow-600 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-yellow-500">
              <option value="">Select vehicle</option>
              <option value="Car">üöó Car (AC Comfort)</option>
              <option value="Auto">üõ∫ Auto Rickshaw (Budget-Friendly)</option>
              <option value="Bike">üèçÔ∏è Bike (Fastest)</option>
            </select>
            <span class="error-message" id="vehicleTypeError">Please select a vehicle type</span>
          </div>

          <!-- Phone Number -->
          <div>
            <label class="block text-yellow-400 mb-2 font-semibold">Contact Number *</label>
            <input type="tel" id="driverPhone" required placeholder="Your phone number" class="w-full bg-gray-900 border border-yellow-600 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-yellow-500">
            <span class="error-message" id="phoneError">Phone number is required</span>
          </div>

          <!-- From Location -->
          <div>
            <label class="block text-yellow-400 mb-2 font-semibold">Pickup Location *</label>
            <select id="fromLocation" required class="w-full bg-gray-900 border border-yellow-600 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-yellow-500">
              <option value="">Select pickup point</option>
              <option value="Chitkara University">Chitkara University</option>
              <option value="Rajpura Railway Station">Rajpura Railway Station</option>
              <option value="Rajpura Bus Stand">Rajpura Bus Stand</option>
              <option value="Shambhu Barrier">Shambhu Barrier</option>
              <option value="Sirhind">Sirhind</option>
              <option value="Morinda">Morinda</option>
            </select>
            <span class="error-message" id="fromError">Please select pickup location</span>
          </div>

          <!-- To Location -->
          <div>
            <label class="block text-yellow-400 mb-2 font-semibold">Drop Location *</label>
            <select id="toLocation" required class="w-full bg-gray-900 border border-yellow-600 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-yellow-500">
              <option value="">Select drop point</option>
              <option value="Chitkara University">Chitkara University</option>
              <option value="Rajpura Railway Station">Rajpura Railway Station</option>
              <option value="Rajpura Bus Stand">Rajpura Bus Stand</option>
              <option value="Shambhu Barrier">Shambhu Barrier</option>
              <option value="Sirhind">Sirhind</option>
              <option value="Morinda">Morinda</option>
            </select>
            <span class="error-message" id="toError">Please select drop location</span>
          </div>

          <!-- Date -->
          <div>
            <label class="block text-yellow-400 mb-2 font-semibold">Date *</label>
            <input type="date" id="rideDate" required class="w-full bg-gray-900 border border-yellow-600 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-yellow-500">
            <span class="error-message" id="dateError">Please select a date</span>
          </div>

          <!-- Time -->
          <div>
            <label class="block text-yellow-400 mb-2 font-semibold">Time *</label>
            <input type="time" id="rideTime" required class="w-full bg-gray-900 border border-yellow-600 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-yellow-500">
            <span class="error-message" id="timeError">Please select time</span>
          </div>

          <!-- Seats -->
          <div>
            <label class="block text-yellow-400 mb-2 font-semibold">Available Seats *</label>
            <input type="number" id="seats" min="1" max="6" required placeholder="How many passengers?" class="w-full bg-gray-900 border border-yellow-600 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-yellow-500">
            <span class="error-message" id="seatsError">Seats must be between 1-6</span>
          </div>

          <!-- Price -->
          <div>
            <label class="block text-yellow-400 mb-2 font-semibold">Price Per Seat (‚Çπ) *</label>
            <input type="number" id="price" min="10" required placeholder="Amount in rupees" class="w-full bg-gray-900 border border-yellow-600 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-yellow-500">
            <span class="error-message" id="priceError">Price must be at least ‚Çπ10</span>
            <p class="text-gray-400 text-sm mt-1">Suggested: Car ‚Çπ50-100, Auto ‚Çπ30-50, Bike ‚Çπ20-40</p>
          </div>
        </div>

        <!-- Notes -->
        <div>
          <label class="block text-yellow-400 mb-2 font-semibold">Additional Notes (Optional)</label>
          <textarea id="notes" rows="3" placeholder="Any special instructions? (e.g., AC available, luggage space, etc.)" class="w-full bg-gray-900 border border-yellow-600 rounded-lg px-4 py-3 text-white focus:outline-none focus:ring-2 focus:ring-yellow-500"></textarea>
        </div>

        <!-- Message Box -->
        <div id="messageBox" class="hidden p-4 rounded-xl text-center text-sm font-medium"></div>

        <!-- Submit Button -->
        <button type="submit" id="submitBtn" class="w-full bg-gradient-to-r from-yellow-500 to-yellow-600 text-black font-bold py-4 rounded-xl hover:shadow-lg transform hover:scale-105 transition text-lg">
          üöó Publish Ride Offer
        </button>
      </form>
    </div>

    <!-- My Offered Rides -->
    <div class="bg-black/60 backdrop-blur-xl rounded-2xl p-8 border border-yellow-600/30">
      <h2 class="text-2xl font-bold text-yellow-400 mb-4">My Offered Rides</h2>
      <div id="myRidesContainer" class="space-y-4">
        <p class="text-gray-400 text-center py-8">Loading your rides...</p>
      </div>
    </div>
  </div>

  <script>
    // API Configuration
    const API_URL = 'http://localhost:3000';
    let currentUser = null;

    // DOM elements
    const offerRideForm = document.getElementById('offerRideForm');
    const userInfo = document.getElementById('userInfo');
    const logoutBtn = document.getElementById('logoutBtn');
    const myRidesContainer = document.getElementById('myRidesContainer');
    const messageBox = document.getElementById('messageBox');
    const submitBtn = document.getElementById('submitBtn');
    const connectionStatus = document.getElementById('connectionStatus');

    // Form inputs
    const vehicleTypeInput = document.getElementById('vehicleType');
    const driverPhoneInput = document.getElementById('driverPhone');
    const fromLocationInput = document.getElementById('fromLocation');
    const toLocationInput = document.getElementById('toLocation');
    const rideDateInput = document.getElementById('rideDate');
    const rideTimeInput = document.getElementById('rideTime');
    const seatsInput = document.getElementById('seats');
    const priceInput = document.getElementById('price');
    const notesInput = document.getElementById('notes');

    // Error elements
    const vehicleTypeError = document.getElementById('vehicleTypeError');
    const phoneError = document.getElementById('phoneError');
    const fromError = document.getElementById('fromError');
    const toError = document.getElementById('toError');
    const dateError = document.getElementById('dateError');
    const timeError = document.getElementById('timeError');
    const seatsError = document.getElementById('seatsError');
    const priceError = document.getElementById('priceError');

    // Check server connection
    async function checkServerConnection() {
      try {
        const response = await fetch(`${API_URL}/rides`);
        if (response.ok) {
          showConnectionStatus('‚úÖ Connected to server', 'success');
          return true;
        }
      } catch (error) {
        showConnectionStatus('‚ùå Server not connected. Please start JSON Server on port 3000', 'error');
        return false;
      }
    }

    function showConnectionStatus(message, type) {
      connectionStatus.querySelector('p').textContent = message;
      connectionStatus.classList.remove('hidden');
      
      if (type === 'success') {
        connectionStatus.style.backgroundColor = 'rgba(34, 197, 94, 0.2)';
        connectionStatus.style.border = '1px solid #22c55e';
        connectionStatus.style.color = '#22c55e';
        setTimeout(() => connectionStatus.classList.add('hidden'), 3000);
      } else {
        connectionStatus.style.backgroundColor = 'rgba(239, 68, 68, 0.2)';
        connectionStatus.style.border = '1px solid #ef4444';
        connectionStatus.style.color = '#ef4444';
      }
    }

    // Check login
    function checkLogin() {
      const userString = localStorage.getItem('currentUser');
      
      if (!userString) {
        alert('Please login first!');
        window.location.href = 'Login.html';
        return false;
      }
      
      currentUser = JSON.parse(userString);
      userInfo.textContent = `üë§ ${currentUser.name}`;
      driverPhoneInput.value = currentUser.phone;
      return true;
    }

    // Logout
    logoutBtn.addEventListener('click', function() {
      if (confirm('Are you sure you want to logout?')) {
        localStorage.removeItem('currentUser');
        window.location.href = 'Login.html';
      }
    });

    // Validation functions
    function validatePhone(phone) {
      return phone.trim().length === 10 && /^\d+$/.test(phone);
    }

    function validateSeats(seats) {
      const num = parseInt(seats);
      return num >= 1 && num <= 6;
    }

    function validatePrice(price) {
      return parseInt(price) >= 10;
    }

    // Error handling
    function showError(errorElement, message) {
      errorElement.textContent = message;
      errorElement.style.display = 'block';
    }

    function hideError(errorElement) {
      errorElement.style.display = 'none';
    }

    function showMessage(message, type) {
      messageBox.textContent = message;
      messageBox.classList.remove('hidden');
      
      if (type === 'success') {
        messageBox.style.backgroundColor = 'rgba(34, 197, 94, 0.2)';
        messageBox.style.border = '1px solid #22c55e';
        messageBox.style.color = '#22c55e';
      } else {
        messageBox.style.backgroundColor = 'rgba(239, 68, 68, 0.2)';
        messageBox.style.border = '1px solid #ef4444';
        messageBox.style.color = '#ef4444';
      }

      setTimeout(() => messageBox.classList.add('hidden'), 5000);
    }

    // Set minimum date to today
    const today = new Date().toISOString().split('T')[0];
    rideDateInput.min = today;

    // Form submission
    offerRideForm.addEventListener('submit', async function(event) {
      event.preventDefault();

      // Get form values to add details
      const vehicleType = vehicleTypeInput.value;
      const driverPhone = driverPhoneInput.value.trim();
      const fromLocation = fromLocationInput.value;
      const toLocation = toLocationInput.value;
      const rideDate = rideDateInput.value;
      const rideTime = rideTimeInput.value;
      const seats = seatsInput.value;
      const price = priceInput.value;
      const notes = notesInput.value.trim();

      // Validation
      let isValid = true;

      if (!vehicleType) {
        showError(vehicleTypeError, 'Please select a vehicle type');
        isValid = false;
      }

      if (!validatePhone(driverPhone)) {
        showError(phoneError, 'Phone must be 10 digits');
        isValid = false;
      }

      if (!fromLocation) {
        showError(fromError, 'Please select pickup location');
        isValid = false;
      }

      if (!toLocation) {
        showError(toError, 'Please select drop location');
        isValid = false;
      }

      if (fromLocation === toLocation) {
        showError(toError, 'Pickup and drop cannot be same!');
        isValid = false;
      }

      if (!rideDate) {
        showError(dateError, 'Please select a date');
        isValid = false;
      }

      if (!rideTime) {
        showError(timeError, 'Please select time');
        isValid = false;
      }

      if (!validateSeats(seats)) {
        showError(seatsError, 'Seats must be between 1-6');
        isValid = false;
      }

      if (!validatePrice(price)) {
        showError(priceError, 'Price must be at least ‚Çπ10');
        isValid = false;
      }

      if (!isValid) {
        showMessage('Please fix all errors', 'error');
        return;
      }

      // Disable button
      submitBtn.disabled = true;
      submitBtn.textContent = 'Publishing...';

      // Create ride data - EXACT format that Book Ride expects
      const rideData = {
        driverId: currentUser.id,
        driverName: currentUser.name,
        driverPhone: driverPhone,
        vehicleType: vehicleType,
        from: fromLocation,
        to: toLocation,
        date: rideDate,
        time: rideTime,
        seats: parseInt(seats),
        pricePerSeat: parseInt(price),
        bookedSeats: 0,
        passengers: [],
        notes: notes,
        createdAt: new Date().toISOString(),
        status: 'active'
      };

      console.log('Posting ride data:', rideData);

      try {
        const response = await fetch(`${API_URL}/rides`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(rideData)
        });

        const responseData = await response.json();
        console.log('Server response:', responseData);

        if (response.ok) {
          showMessage('‚úÖ Ride published successfully! Passengers can now book your ride.', 'success');
          offerRideForm.reset();
          driverPhoneInput.value = currentUser.phone;
          loadMyRides();
        } else {
          showMessage('‚ùå Error publishing ride. Please try again.', 'error');
        }
      } catch (error) {
        console.error('Error:', error);
        showMessage('üî¥ Connection error. Make sure JSON Server is running on port 3000!', 'error');
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = 'üöó Publish Ride Offer';
      }
    });

    // Load my rides
    async function loadMyRides() {
      try {
        const response = await fetch(`${API_URL}/rides?driverId=${currentUser.id}`);
        const myRides = await response.json();

        console.log('My rides:', myRides);

        if (myRides.length === 0) {
          myRidesContainer.innerHTML = '<p class="text-gray-400 text-center py-8">You haven\'t offered any rides yet.</p>';
          return;
        }

        myRidesContainer.innerHTML = myRides.map(ride => `
          <div class="bg-gray-900/60 border border-yellow-600/30 rounded-xl p-5">
            <div class="flex justify-between items-start">
              <div class="flex-1">
                <h3 class="text-lg font-bold text-yellow-400">${ride.vehicleType} - ${ride.from} ‚Üí ${ride.to}</h3>
                <div class="grid grid-cols-2 gap-2 mt-3 text-sm">
                  <p class="text-gray-300">üìÖ ${ride.date} at ${ride.time}</p>
                  <p class="text-gray-300">üí∫ ${ride.bookedSeats}/${ride.seats} seats booked</p>
                  <p class="text-gray-300">üí∞ ‚Çπ${ride.pricePerSeat} per seat</p>
                  <p class="text-gray-300">üìû ${ride.driverPhone}</p>
                </div>
                ${ride.notes ? `<p class="text-gray-400 text-sm mt-2">üìù ${ride.notes}</p>` : ''}
              </div>
              <button onclick="deleteRide(${ride.id})" class="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-lg text-sm ml-4 transition">
                üóëÔ∏è Delete
              </button>
            </div>
          </div>
        `).join('');
      } catch (error) {
        console.error('Error loading rides:', error);
        myRidesContainer.innerHTML = '<p class="text-red-400 text-center py-8">‚ùå Error loading your rides. Check server connection.</p>';
      }
    }

    // Delete ride
    async function deleteRide(rideId) {
      if (!confirm('Are you sure you want to delete this ride?')) {
        return;
      }

      try {
        const response = await fetch(`${API_URL}/rides/${rideId}`, {
          method: 'DELETE'
        });

        if (response.ok) {
          showMessage('‚úÖ Ride deleted successfully', 'success');
          loadMyRides();
        } else {
          showMessage('‚ùå Error deleting ride', 'error');
        }
      } catch (error) {
        console.error('Delete error:', error);
        showMessage('‚ùå Error deleting ride', 'error');
      }
    }

    window.deleteRide = deleteRide;

    // Clear errors on input
    vehicleTypeInput.addEventListener('change', () => hideError(vehicleTypeError));
    driverPhoneInput.addEventListener('input', () => hideError(phoneError));
    fromLocationInput.addEventListener('change', () => hideError(fromError));
    toLocationInput.addEventListener('change', () => hideError(toError));
    rideDateInput.addEventListener('change', () => hideError(dateError));
    rideTimeInput.addEventListener('change', () => hideError(timeError));
    seatsInput.addEventListener('input', () => hideError(seatsError));
    priceInput.addEventListener('input', () => hideError(priceError));

    // Initialize
    if (checkLogin()) {
      checkServerConnection();
      loadMyRides();
    }
  </script>
</body>
</html>
